---
import '../styles/global.css';
import ThemeToggle from '../components/ThemeToggle.astro';

interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "VRChat IME Chat - VRChatで日本語入力",
  description = "Windows IMEを使用してVRChatで快適に日本語入力ができるデスクトップアプリケーション"
} = Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://vrchat-ime-chat.vercel.app" />
    <meta property="og:image" content="https://vrchat-ime-chat.vercel.app/ogp.png" />
    <meta property="og:site_name" content="VRChat IME Chat" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://vrchat-ime-chat.vercel.app/ogp.png" />
    <meta name="theme-color" content="#3b82f6" />
  </head>
  <body>
    <div class="min-h-screen">
      <slot />
      <ThemeToggle />
    </div>
    <script is:inline>
      // Initialize theme
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      document.documentElement.setAttribute('data-theme', theme);
      document.documentElement.classList.toggle('dark', theme === 'dark');
    
      document.addEventListener('DOMContentLoaded', () => {
        const downloadButtons = document.querySelectorAll('[data-download-btn]');
        downloadButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            setTimeout(() => {
              window.location.href = '/downloaded';
            }, 1000);
          });
        });
      });
    </script>
  </body>
</html>
